LevelEditorScene
private boolean changingScene = false;
    private float timeToChangeScene = 2.0f;
 //System.out.println("FPS: "+ (1.0 / dt));
//        //can update with dt
//        if(!changingScene && KeyListener.isKeyPressed(KeyEvent.VK_SPACE)){
//            changingScene = true;
//
//        }
//        if(changingScene && timeToChangeScene > 0){
//            timeToChangeScene -=dt; //subtract the time passed in last frame
//            Window.get().r -= dt * 5.0f;
//            Window.get().g -= dt * 5.0f;
//            Window.get().b -= dt * 5.0f;
//        }else if(changingScene){
//            //finished fading now want to change scene
//            Window.changeScene(1);
//        }


update:
//        camera.position.x -= dt*50.0f;
//        camera.position.y -= dt*20.0f; //ddnt have this but hopefully ddnt miss anythign
        //need an upload func for each material you need to use
        defaultShader.use(); //use the shader
        //upload tex to shader
        defaultShader.uploadTexture("TEX_SAMPLER", 0); //want to upload texid at slot 0
        glActiveTexture(GL_TEXTURE0);
        testTexture.bind();

        //upload variables
        defaultShader.uploadMat4f("uProjection", camera.getProjectionMatrix());
        defaultShader.uploadMat4f("uView", camera.getViewMatrix());
        defaultShader.uploadFloat("uTime", Time.getTime());//passing a time so we can use it to animate
        //bind vao that we are using
        glBindVertexArray(vaoID);

        //enable the vertex attribute pointers
        //defined these two up there
        glEnableVertexAttribArray(0);
        glEnableVertexAttribArray(1);

        //draw them
        //never neg so unsigned
        glDrawElements(GL_TRIANGLES, elementArray.length, GL_UNSIGNED_INT, 0);

        //now have to unbind everything
        glDisableVertexAttribArray(0);
        glDisableVertexAttribArray(1);

        glBindVertexArray(0); //flag to bind nothing
        defaultShader.detach();
        if(firstTime) {
            System.out.println("Creating Game Obj 2!");
            GameObject go = new GameObject(" GameTest 2");
            go.addComponent(new SpriteRenderer());
            this.addGameObjectToScene(go);
            firstTime = false;
        }

        init:
        System.out.println("Creating test obj");
                this.testObj = new GameObject("testObject");
                this.testObj.addComponent(new SpriteRenderer());
                this.testObj.addComponent(new FontRenderer());
                this.addGameObjectToScene(this.testObj);


                this.camera = new Camera(new Vector2f(-200, -300)); //init at 0,0
                defaultShader = new Shader("assets/shaders/default.glsl");
                defaultShader.compile();
                this.testTexture = new Texture("assets/images/testImage.png");
                //=========================================================================
                // Generate VAO, VBO, and EBO buffer objects, and send to GPU
                //=========================================================================
                vaoID = glGenVertexArrays();
                glBindVertexArray(vaoID);

                //create a float buffer of vertices
                FloatBuffer vertexBuffer = BufferUtils.createFloatBuffer(vertexArray.length);
                //put vertex array in and flip it so its oriented the right way for openGL
                vertexBuffer.put(vertexArray).flip();

                //create VBO and upload th vertex buffer
                vboID = glGenBuffers();
                //id we want to bind, working on a certain object make sure u have a buffer in mind
                glBindBuffer(GL_ARRAY_BUFFER, vboID);
                glBufferData(GL_ARRAY_BUFFER, vertexBuffer, GL_STATIC_DRAW);

                //create the indicies and upload
                IntBuffer elementBuffer = BufferUtils.createIntBuffer(elementArray.length);
                elementBuffer.put(elementArray).flip();

                //static drawing and sending it an element buffer make sure you know that
                eboID = glGenBuffers();
                glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, eboID);
                glBufferData(GL_ELEMENT_ARRAY_BUFFER, elementBuffer, GL_STATIC_DRAW);

                //Add the vertex attribute pointers
                //tell it we have the position and then the colors after
                int positionsSize = 3; //x,y,z
                int colorSize = 4; //r,g,b,a
                int uvSize = 2;
                //dont have to guess floatsize in bytes
               //dont need int floatSizeBytes = 4; //size of a float is 4 bytes
                int vertexSizeBytes = (positionsSize + colorSize + uvSize) * Float.BYTES; //gives us the bytes

                //why is th index 0 for th gl slot, well 0 is th position
                glVertexAttribPointer(0, positionsSize, GL_FLOAT, false, vertexSizeBytes, 0);
                glEnableVertexAttribArray(0);

                //in bytes to get to the offest for th color attribute
                glVertexAttribPointer(1, colorSize, GL_FLOAT, false, vertexSizeBytes, positionsSize * Float.BYTES);
                glEnableVertexAttribArray(1);

                //enable atttribute pointer for uv
                glVertexAttribPointer(2, uvSize, GL_FLOAT, false, vertexSizeBytes, (positionsSize + colorSize) * Float.BYTES);
                //enable the array we are pointing too
                glEnableVertexAttribArray(2); //we now have three vertex pointers
variables:
 private String vertexShaderSrc = "#version 330 core\n" +
            "layout (location=0) in vec3 aPos;\n" +
            "layout (location=1) in vec4 aColor;\n" +
            "out vec4 fColor; //f to shader\n" +
            "void main(){\n" +
            "    fColor = aColor;\n" +
            "    gl_Position = vec4(aPos, 1.0);\n" +
            "}";

    private String fragmentShaderSrc = "#version 330 core\n" +
            "in vec4 fColor; //have an out above so we need an in here\n" +
            "out vec4 color;\n" +
            "void main(){\n" +
            "    color = fColor;\n" +
            "}";

    //need stuff for gl to identify it
    private int vertexID, fragmentID, shaderProgram;
    private float[] vertexArray = {
      //an array of th verticies for pixel making
            //position               //color                       //uv coords
            100f,   0f, 0.0f,         1.0f, 0.0f, 0.0f, 1.0f,      1, 1, //bottom right 0
              0f, 100f, 0.0f,         0.0f, 1.0f, 0.0f, 1.0f,      0, 0, //top left 1
            100f, 100f, 0.0f,         1.0f, 0.0f, 1.0f, 1.0f,      1, 0,// top right 2
              0f,   0f, 0.0f,         1.0f, 1.0f, 0.0f, 1.0f,      0, 1//bottom left 3
    };
//IMPORTANT: MUST BE IN COUNTER CLOCKWISE ORDER
    private int[] elementArray = {
            /*
                  x         x


                  x         x
             */
        2,1,0, //top right triangle
        0,1,3 //bottom left triangle
    };

    //need more IDs
    private int vaoID, vboID, eboID;
    private Shader defaultShader;
    private Texture testTexture;

    GameObject testObj;
    private boolean firstTime = true;

//padding
        int xOffset = 10;
        int yOffset = 10;
        float totalWidth = (float)(600 - xOffset * 2);
        float totalHeight = (float)(300 - yOffset * 2);
        float sizeX = totalWidth / 100.0f;
        float sizeY = totalHeight / 100.0f;
        float padding = 0;

        for(int x=0; x < 100; x++){
            for(int y=0; y <100; y++){
                //position
                float xPos = xOffset + (x * sizeX) + (padding * x);
                float yPos = yOffset + (y * sizeY) + (padding * y);

                GameObject go = new GameObject("Obj "+ x + " " + y, new Transform(new Vector2f(xPos, yPos), new Vector2f(sizeX, sizeY)));
                go.addComponent(new SpriteRenderer(new Vector4f(xPos / totalWidth, yPos / totalHeight, 1, 1)));
                this.addGameObjectToScene(go);
            }
        }

         spriteFlipTimeLeft -= dt;
                if(spriteFlipTimeLeft <= 0){
                    spriteFlipTimeLeft = spriteFlipTime;
                    spriteIndex ++;
                    if(spriteIndex > 4){
                        spriteIndex = 0;
                    }
                    obj1.getComponent(SpriteRenderer.class).setSprite(sprites.getSprite(spriteIndex));
                }